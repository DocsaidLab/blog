"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7811],{4156:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>a});var t=o(4848),s=o(8453);const l={sidebar_position:1},r="Document",i={id:"docsaidkit/objects/document",title:"Document",description:"Document(image Optional[Polygon] = None, doctype Optional[List[str] = None, ocrpolygons Optional[dict] = None)]",source:"@site/docs/docsaidkit/objects/document.md",sourceDirName:"docsaidkit/objects",slug:"/docsaidkit/objects/document",permalink:"/docsaidkit/objects/document",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Objects",permalink:"/category/objects"},next:{title:"Utils",permalink:"/category/utils"}},c={},a=[];function d(n){const e={a:"a",blockquote:"blockquote",code:"code",h1:"h1",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"document",children:"Document"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"import warnings\nfrom dataclasses import dataclass, field\nfrom pathlib import Path\nfrom typing import List, Optional, Tuple\n\nimport cv2\nimport numpy as np\n\nfrom .mixins import DataclassCopyMixin, DataclassToJsonMixin\nfrom .structures import Polygon, Polygons\nfrom .utils import now\nfrom .vision import draw_ocr_infos, imwarp_quadrangle, imwrite\n\n__all__ = ['Document', 'poly_angle', 'calc_angle']\n\n\ndef calc_angle(v1, v2):\n    \"\"\"\n    Calculate the angle between two vectors.\n    \"\"\"\n    # Ensure the dot product is within the valid range for arccos\n    dot_product = np.dot(v1, v2)\n    norms_product = np.linalg.norm(v1, 2) * np.linalg.norm(v2, 2)\n    cos_angle = np.clip(dot_product / norms_product, -1.0, 1.0)\n\n    angle = np.arccos(cos_angle)\n    angle = np.degrees(angle)\n\n    # Determine the direction of the angle\n    v1_3d = np.array([*v1, 0])\n    v2_3d = np.array([*v2, 0])\n    if np.cross(v1_3d, v2_3d)[-1] < 0:\n        angle = 360 - angle\n\n    return angle\n\n\ndef poly_angle(\n    poly1: Polygon,\n    poly2: Optional[Polygon] = None,\n    base_vector: Tuple[int, int] = (0, 1)\n) -> float:\n    \"\"\"\n    Calculate the angle between two polygons or a polygon and a base vector.\n    \"\"\"\n\n    def _get_angle(poly):\n        poly_points = poly.numpy()\n        vector1 = poly_points[2] - poly_points[0]\n        vector2 = poly_points[3] - poly_points[1]\n        return vector1 + vector2\n\n    v1 = _get_angle(poly1)\n    v2 = _get_angle(poly2) if poly2 is not None else np.array(\n        base_vector, dtype='float32')\n\n    return calc_angle(v1, v2)\n\n\n@dataclass\nclass Document(DataclassCopyMixin, DataclassToJsonMixin):\n\n    image: Optional[np.ndarray] = field(default=None)\n    doc_polygon: Optional[Polygon] = field(default=None)\n    doc_type: Optional[str] = field(default=None)\n    ocr_texts: Optional[List[str]] = field(default=None)\n    ocr_polygons: Optional[Polygons] = field(default=None)\n    ocr_kie: Optional[dict] = field(default=None)\n\n    @property\n    def has_doc_polygon(self):\n        return self.doc_polygon is not None\n\n    @property\n    def has_ocr_polygons(self):\n        return self.ocr_polygons is not None\n\n    @property\n    def has_ocr_texts(self):\n        return self.ocr_texts is not None\n\n    def be_jsonable(self, exclude_image: bool = True) -> dict:\n        if exclude_image and 'image' in self.__dict__:\n            img = self.__dict__.pop('image')\n            out = super().be_jsonable()\n            self.image = img\n            return out\n        return super().be_jsonable()\n\n    @property\n    def doc_flat_img(self):\n        return self.gen_doc_flat_img()\n\n    @property\n    def doc_polygon_angle(self):\n        return poly_angle(self.doc_polygon)\n\n    def gen_doc_flat_img(self, image_size: Optional[Tuple[int, int]] = None):\n        if not self.has_doc_polygon:\n            warnings.warn(\n                'No polygon in the image, returns the original image.')\n            return self.image.copy()\n\n        if image_size is None:\n            return imwarp_quadrangle(self.image, self.doc_polygon)\n\n        h, w = image_size\n        point1 = self.doc_polygon.astype('float32')\n        point2 = np.array([[0, 0], [w, 0], [w, h], [0, h]], dtype='float32')\n        M = cv2.getPerspectiveTransform(point1, point2)\n        flat_img = cv2.warpPerspective(self.image, M, (int(w), int(h)))\n        return flat_img\n\n    def gen_doc_info_image(self, thickness: Optional[int] = None) -> np.ndarray:\n        if not self.has_doc_polygon:\n            warnings.warn(\n                'No polygon in the image, returns the original image.')\n            return self.image.copy()\n\n        colors = [(0, 255, 255), (255, 255, 0), (0, 255, 0), (0, 0, 255)]\n        export_img = self.image.copy()\n        _polys = self.doc_polygon.astype(int)\n        _polys_roll = np.roll(_polys, 1, axis=0)\n        for p1, p2, color in zip(_polys, _polys_roll, colors):\n            _thickness = max(int(export_img.shape[1] * 0.005), 1) \\\n                if thickness is None else thickness\n            export_img = cv2.circle(\n                export_img, p2, radius=_thickness*2,\n                color=color, thickness=-1, lineType=cv2.LINE_AA\n            )\n            export_img = cv2.arrowedLine(\n                export_img, p2, p1, color=color,\n                thickness=_thickness, line_type=cv2.LINE_AA\n            )\n        return export_img\n\n    def gen_ocr_info_image(self, **kwargs):\n        if self.has_ocr_polygons and self.has_ocr_texts:\n            return draw_ocr_infos(self.image, self.ocr_texts, self.ocr_polygons, **kwargs)\n        return self.image.copy()\n\n    def get_path(self, folder: str = None, name: str = None) -> Path:\n        folder = Path(folder or '.')\n        name = name or f'output_{now()}.jpg'\n        return folder / name\n\n    def draw_doc(self, folder: Optional[str] = None, name: Optional[str] = None, **kwargs) -> None:\n        imwrite(self.gen_doc_info_image(**kwargs), self.get_path(folder, name))\n\n    def draw_ocr(self, folder: Optional[str] = None, name: Optional[str] = None, **kwargs) -> None:\n        imwrite(self.gen_ocr_info_image(**kwargs), self.get_path(folder, name))\n"})}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"https://github.com/DocsaidLab/DocsaidKit/blob/71170598902b6f8e89a969f1ce27ed4fd05b2ff2/docsaidkit/document.py#L61",children:"Document(image: Optional[np.ndarray] = None, doc_polygon: Optional[Polygon] = None, doc_type: Optional[str] = None, ocr_texts: Optional[List[str] = None, ocr_polygons: Optional[Polygons] = None, ocr_kie: Optional[dict] = None)]"})}),"\n"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u8aaa\u660e"}),"\uff1a\u6587\u4ef6\u985e\u5225\uff0c\u5305\u542b\u6587\u4ef6\u5f71\u50cf\u3001\u6587\u4ef6\u591a\u908a\u5f62\u3001\u6587\u4ef6\u985e\u578b\u3001OCR \u6587\u5b57\u3001OCR \u591a\u908a\u5f62\u3001OCR KIE\u3002\u9019\u500b\u985e\u5225\u7528\u4f86\u6574\u5408\u591a\u500b\u6a21\u578b\u7684\u8f38\u51fa\uff0c\u5f59\u6574\u5404\u65b9\u9762\u7684\u8cc7\u8a0a\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"\u53c3\u6578"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"image"})," (",(0,t.jsx)(e.code,{children:"Optional[np.ndarray]"}),")\uff1a\u6587\u4ef6\u5f71\u50cf\u3002"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"doc_polygon"})," (",(0,t.jsx)(e.code,{children:"Optional[Polygon]"}),")\uff1a\u6587\u4ef6\u591a\u908a\u5f62\u3002"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"doc_type"})," (",(0,t.jsx)(e.code,{children:"Optional[str]"}),")\uff1a\u6587\u4ef6\u985e\u578b\u3002"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"ocr_texts"})," (",(0,t.jsx)(e.code,{children:"Optional[List[str]]"}),")\uff1aOCR \u6587\u5b57\u3002"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"ocr_polygons"})," (",(0,t.jsx)(e.code,{children:"Optional[Polygons]"}),")\uff1aOCR \u591a\u908a\u5f62\u3002"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"ocr_kie"})," (",(0,t.jsx)(e.code,{children:"Optional[dict]"}),")\uff1aOCR KIE\u3002"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"\u5c6c\u6027"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"has_doc_polygon"}),"\uff1a\u662f\u5426\u6709\u6587\u4ef6\u591a\u908a\u5f62\u3002"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"has_ocr_polygons"}),"\uff1a\u662f\u5426\u6709 OCR \u591a\u908a\u5f62\u3002"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"has_ocr_texts"}),"\uff1a\u662f\u5426\u6709 OCR \u6587\u5b57\u3002"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"doc_flat_img"}),"\uff1a\u6587\u4ef6\u591a\u908a\u5f62\u88c1\u526a\u5f8c\u7684\u5f71\u50cf\u3002"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"doc_polygon_angle"}),"\uff1a\u6587\u4ef6\u591a\u908a\u5f62\u7684\u89d2\u5ea6\u3002"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"\u65b9\u6cd5"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"be_jsonable(exclude_image: bool = True) -> dict"}),"\uff1a\u5c07\u6587\u4ef6\u985e\u5225\u8f49\u63db\u70ba JSON \u53ef\u5e8f\u5217\u5316\u7684\u5b57\u5178\u3002"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"gen_doc_flat_img(image_size: Optional[Tuple[int, int]] = None) -> np.ndarray"}),"\uff1a\u751f\u6210\u6587\u4ef6\u591a\u908a\u5f62\u88c1\u526a\u5f8c\u7684\u5f71\u50cf\u3002"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"gen_doc_info_image(thickness: Optional[int] = None) -> np.ndarray"}),"\uff1a\u751f\u6210\u6587\u4ef6\u591a\u908a\u5f62\u7684\u4fe1\u606f\u5f71\u50cf\u3002"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"gen_ocr_info_image() -> np.ndarray"}),"\uff1a\u751f\u6210 OCR \u7684\u4fe1\u606f\u5f71\u50cf\u3002"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"get_path(folder: str = None, name: str = None) -> Path"}),"\uff1a\u53d6\u5f97\u6587\u4ef6\u7684\u8def\u5f91\u3002"]}),"\n",(0,t.jsxs)(e.li,{children:["**draw_doc(folder: Optional[str] = None, name: Optional[str] = None, ",(0,t.jsx)(e.strong,{children:"kwargs) -> None"}),"\uff1a\u7e6a\u88fd\u6587\u4ef6\u591a\u908a\u5f62\u7684\u4fe1\u606f\u5f71\u50cf\u3002"]}),"\n",(0,t.jsxs)(e.li,{children:["**draw_ocr(folder: Optional[str] = None, name: Optional[str] = None, ",(0,t.jsx)(e.strong,{children:"kwargs) -> None"}),"\uff1a\u7e6a\u88fd OCR \u7684\u4fe1\u606f\u5f71\u50cf\u3002"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"\u7bc4\u4f8b"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"import docsaidkit as D\n\ndoc = D.Document()\ndoc.doc_polygon = D.Polygon([[100, 100], [200, 100], [200, 200], [100, 200]])\ndoc.doc_type = 'ID'\ndoc.ocr_texts = ['Name: Alice', 'ID: 123456']\ndoc.ocr_polygons = D.Polygons([[[100, 100], [200, 100], [200, 200], [100, 200]]])\ndoc.ocr_kie = {'Name': 'Alice', 'ID': '123456'}\nprint(doc)\n# >>> Document(\n#       image=None,\n#       doc_polygon=Polygon([[100, 100],\n#                            [200, 100],\n#                            [200, 200],\n#                            [100, 200]]),\n#       doc_type='ID',\n#       ocr_texts=['Name: Alice', 'ID: 123456'],\n#       ocr_polygons=Polygons([[[100, 100],\n#                               [200, 100],\n#                               [200, 200],\n#                               [100, 200]]]),\n#       ocr_kie={'Name': 'Alice', 'ID': '123456'})\n"})}),"\n"]}),"\n"]})]})}function p(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},8453:(n,e,o)=>{o.d(e,{R:()=>r,x:()=>i});var t=o(6540);const s={},l=t.createContext(s);function r(n){const e=t.useContext(l);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),t.createElement(l.Provider,{value:e},n.children)}}}]);