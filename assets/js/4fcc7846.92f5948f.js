"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3068],{3053:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>p,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var r=i(4848),s=i(8453);const o={sidebar_position:1},t="video2frames",d={id:"docsaidkit/vision/videotools/video2frames",title:"video2frames",description:"video2frames(videopath int = None) -> List[np.ndarray]",source:"@site/docs/docsaidkit/vision/videotools/video2frames.md",sourceDirName:"docsaidkit/vision/videotools",slug:"/docsaidkit/vision/videotools/video2frames",permalink:"/docsaidkit/vision/videotools/video2frames",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"videotools",permalink:"/category/videotools"},next:{title:"test",permalink:"/docsaidkit/vision/videotools/test"}},a={},c=[];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"video2frames",children:"video2frames"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from pathlib import Path\nfrom typing import Any, List\n\nimport cv2\nimport numpy as np\n\n__all__ = ['video2frames', 'is_video_file']\n\nVIDEO_SUFFIX = ['.MOV', '.MP4', '.AVI', '.WEBM', '.3GP', '.MKV']\n\n\ndef is_video_file(x: Any) -> bool:\n    x = Path(x)\n    cond1 = x.exists()\n    cond2 = x.suffix.upper() in VIDEO_SUFFIX\n    return cond1 and cond2\n\n\ndef video2frames(\n    video_path: str,\n    frame_per_sec: int = None,\n) -> List[np.ndarray]:\n    \"\"\"\n    Extracts the frames from a video using ray\n    Inputs:\n        video_path (str): Path to the video.\n        frame_per_sec (int, Optional): The number of extracting frames per sec.\n            If None, all frames will be extracted.\n\n    Returns:\n        frames (List[np.ndarray]): A list of frames.\n    \"\"\"\n    if not is_video_file(video_path):\n        raise TypeError(f'The video_path {video_path} is inappropriate.')\n\n    # get total_frames frames of video\n    cap = cv2.VideoCapture(str(video_path))\n    if not cap.isOpened():\n        print(f\"Error opening video file: {video_path}\")\n        return []\n\n    # Get the original FPS of the video\n    original_fps = cap.get(cv2.CAP_PROP_FPS)\n\n    # Calculate the interval for frame extraction\n    interval = 1 if frame_per_sec is None \\\n        else int(original_fps / frame_per_sec)\n\n    frames = []\n    index = 0\n    while cap.isOpened():\n        ret, frame = cap.read()\n        if not ret:\n            break\n        # Extract the frame if it's on the specified interval\n        if index % interval == 0:\n            frames.append(frame)\n        index += 1\n    cap.release()\n\n    return frames\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/DocsaidLab/DocsaidKit/blob/71170598902b6f8e89a969f1ce27ed4fd05b2ff2/docsaidkit/vision/videotools/video2frames.py#L19",children:"video2frames(video_path: str, frame_per_sec: int = None) -> List[np.ndarray]"})}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"\u8aaa\u660e"}),"\uff1a\u5f9e\u8996\u8a0a\u4e2d\u63d0\u53d6\u5e40\u3002\u5176\u4e2d\u53ef\u4ee5\u652f\u63f4\u7684\u8996\u8a0a\u683c\u5f0f\u6709 ",(0,r.jsx)(n.code,{children:".MOV"}),", ",(0,r.jsx)(n.code,{children:".MP4"}),", ",(0,r.jsx)(n.code,{children:".AVI"}),", ",(0,r.jsx)(n.code,{children:".WEBM"}),", ",(0,r.jsx)(n.code,{children:".3GP"}),", ",(0,r.jsx)(n.code,{children:".MKV"}),"\u3002"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u53c3\u6578"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"video_path"})," (",(0,r.jsx)(n.code,{children:"str"}),")\uff1a\u8996\u8a0a\u7684\u8def\u5f91\u3002"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"frame_per_sec"})," (",(0,r.jsx)(n.code,{children:"int"}),")\uff1a\u6bcf\u79d2\u63d0\u53d6\u7684\u5e40\u6578\u3002\u5982\u679c\u70ba ",(0,r.jsx)(n.code,{children:"None"}),"\uff0c\u5247\u63d0\u53d6\u6240\u6709\u5e40\u3002"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u50b3\u56de\u503c"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"List[np.ndarray]"}),"\uff1a\u5e40\u7684\u5217\u8868\u3002"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u7bc4\u4f8b"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import docsaidkit as D\n\nframes = D.video2frames('video.mp4', frame_per_sec=1)\nfor frame in frames:\n    D.imshow(frame)\n"})}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>d});var r=i(6540);const s={},o=r.createContext(s);function t(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);