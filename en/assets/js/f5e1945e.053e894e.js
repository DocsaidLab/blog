"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4775],{94749:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>c});var s=i(74848),r=i(28453);const t={sidebar_position:3},o="Advanced",a={id:"docsaidkit/advance",title:"Advanced",description:"Frequently Referenced Resources",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/docsaidkit/advance.md",sourceDirName:"docsaidkit",slug:"/docsaidkit/advance",permalink:"/en/docs/docsaidkit/advance",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/en/docs/docsaidkit/installation"},next:{title:"PIP configs",permalink:"/en/docs/docsaidkit/pipconfig"}},l={},c=[{value:"Frequently Referenced Resources",id:"frequently-referenced-resources",level:2},{value:"Environment Setup",id:"environment-setup",level:2},{value:"Use Docker!",id:"use-docker",level:2},{value:"Installing the Training Environment",id:"installing-the-training-environment",level:3},{value:"Installing the Inference Environment",id:"installing-the-inference-environment",level:3},{value:"Usage",id:"usage",level:2},{value:"Daily Usage",id:"daily-usage",level:3},{value:"Adding gosu Configuration",id:"adding-gosu-configuration",level:3},{value:"Installing Internal Packages",id:"installing-internal-packages",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"advanced",children:"Advanced"}),"\n",(0,s.jsx)(n.h2,{id:"frequently-referenced-resources",children:"Frequently Referenced Resources"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["For details on each version of the PyTorch image built by NVIDIA, please refer to the ",(0,s.jsx)(n.a,{href:"https://docs.nvidia.com/deeplearning/frameworks/pytorch-release-notes/index.html",children:(0,s.jsx)(n.strong,{children:"PyTorch Release Notes"})}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["For preparation before using the NVIDIA runtime, please refer to ",(0,s.jsx)(n.a,{href:"https://github.com/NVIDIA/nvidia-docker/wiki/Installation-(Native-GPU-Support)#usage",children:(0,s.jsx)(n.strong,{children:"Installation (Native GPU Support)"})}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["For instructions on installing the NVIDIA Toolkit, please refer to ",(0,s.jsx)(n.a,{href:"https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html",children:(0,s.jsx)(n.strong,{children:"Installing the NVIDIA Container Toolkit"})}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["For information related to ONNXRuntime, please refer to ",(0,s.jsx)(n.a,{href:"https://onnxruntime.ai/docs/execution-providers/CUDA-ExecutionProvider.html#requirements",children:(0,s.jsx)(n.strong,{children:"ONNX Runtime Release Notes"})}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"environment-setup",children:"Environment Setup"}),"\n",(0,s.jsx)(n.p,{children:"Our working environment, though not overly complex, can encounter some package compatibility issues."}),"\n",(0,s.jsx)(n.p,{children:"Generally, we split the environment into:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Training Environment"}),": PyTorch, OpenCV, CUDA, and cuDNN need to work together."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Deployment Environment"}),": ONNXRuntime, OpenCV, and CUDA need to work together."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The most common conflicts arise from version issues between PyTorch-CUDA and ONNXRuntime-CUDA."}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"Why do they always mismatch? \ud83d\udca2 \ud83d\udca2 \ud83d\udca2"})}),"\n",(0,s.jsx)(n.h2,{id:"use-docker",children:"Use Docker!"}),"\n",(0,s.jsx)(n.p,{children:"We use Docker for installation to ensure environmental consistency, without exceptions."}),"\n",(0,s.jsx)(n.p,{children:"Using Docker can save a lot of time adjusting environments and avoid many unnecessary issues."}),"\n",(0,s.jsx)(n.p,{children:"We continuously test related environments during development. You only need to use the following commands:"}),"\n",(0,s.jsx)(n.h3,{id:"installing-the-training-environment",children:"Installing the Training Environment"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd DocsaidKit\nbash docker/build.bash\n"})}),"\n",(0,s.jsxs)(n.p,{children:['In the "Training Environment," we use ',(0,s.jsx)(n.code,{children:"nvcr.io/nvidia/pytorch:24.05-py3"})," as the base image."]}),"\n",(0,s.jsx)(n.p,{children:"Users can change this according to their needs, and the version number (e.g., 24.05) will be updated over time."}),"\n",(0,s.jsxs)(n.p,{children:["For detailed content of the image, please refer to ",(0,s.jsx)(n.a,{href:"https://docs.nvidia.com/deeplearning/frameworks/pytorch-release-notes/index.html",children:(0,s.jsx)(n.strong,{children:"PyTorch Release Notes"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["If you need to work with your training module, you can use ",(0,s.jsx)(n.code,{children:"docsaid_training_base_image"})," as the base image for secondary development after the build is complete."]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"During training, ONNXRuntime is usually not needed. Even if CUDA issues arise, ONNXRuntime can switch to CPU mode."})}),"\n",(0,s.jsx)(n.h3,{id:"installing-the-inference-environment",children:"Installing the Inference Environment"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd DocsaidKit\nbash docker/build_infer.bash\n"})}),"\n",(0,s.jsxs)(n.p,{children:['In the "Inference Environment," we use ',(0,s.jsx)(n.code,{children:"nvcr.io/nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu22.04"})," as the base image."]}),"\n",(0,s.jsx)(n.p,{children:"This image is specifically for deploying models, so it will not include training environment packages like PyTorch."}),"\n",(0,s.jsx)(n.p,{children:"Users can change this according to their needs, and the versions will change with ONNXRuntime updates."}),"\n",(0,s.jsxs)(n.p,{children:["For inference-related images, please refer to ",(0,s.jsx)(n.a,{href:"https://ngc.nvidia.com/catalog/containers/nvidia:cuda",children:(0,s.jsx)(n.strong,{children:"NVIDIA NGC"})}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(n.p,{children:["Generally, we use this module in conjunction with projects like ",(0,s.jsx)(n.code,{children:"DocAligner"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"daily-usage",children:"Daily Usage"}),"\n",(0,s.jsxs)(n.p,{children:["Here\u2019s an example, assuming you have a ",(0,s.jsx)(n.code,{children:"your_scripts.py"})," file that needs to be executed with Python."]}),"\n",(0,s.jsxs)(n.p,{children:["Assuming you have completed the inference environment installation, write a ",(0,s.jsx)(n.code,{children:"Dockerfile"})," like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Dockerfile",metastring:'title="your_Dockerfile"',children:'# syntax=docker/dockerfile:experimental\nFROM docsaid_infer_image:latest\n\n# Set the working directory, users can change it as needed\nWORKDIR /code\n\n# Example: Install DocAligner\nRUN git clone https://github.com/DocsaidLab/DocAligner.git && \\\n    cd DocAligner && \\\n    python setup.py bdist_wheel && \\\n    pip install dist/*.whl && \\\n    cd .. && rm -rf DocAligner\n\nENTRYPOINT ["python"]\n'})}),"\n",(0,s.jsx)(n.p,{children:"Then build this image:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker build -f your_Dockerfile -t your_image_name .\n"})}),"\n",(0,s.jsx)(n.p,{children:"After that, whenever you use it, wrap the command in Docker:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"#!/bin/bash\ndocker run \\\n    --gpus all \\\n    -v ${PWD}:/code\n    -it --rm your_image_name your_scripts.py\n"})}),"\n",(0,s.jsx)(n.p,{children:"This is equivalent to calling a packaged Python environment directly, ensuring consistency."}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsxs)(n.p,{children:["If you want to enter the container without starting Python, you can change the entry point to ",(0,s.jsx)(n.code,{children:"/bin/bash"}),"."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Dockerfile",children:'ENTRYPOINT ["/bin/bash"]\n'})})]}),"\n",(0,s.jsx)(n.h3,{id:"adding-gosu-configuration",children:"Adding gosu Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["If you encounter permission issues when running Docker, consider using the ",(0,s.jsx)(n.code,{children:"gosu"})," tool."]}),"\n",(0,s.jsxs)(n.p,{children:["Based on the use of ",(0,s.jsx)(n.code,{children:"gosu"}),", modify the original Dockerfile as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Dockerfile",metastring:'title="your_Dockerfile"',children:'# syntax=docker/dockerfile:experimental\nFROM docsaid_infer_image:latest\n\n# Set the working directory, users can change it as needed\nWORKDIR /code\n\n# Example: Install DocAligner\nRUN git clone https://github.com/DocsaidLab/DocAligner.git && \\\n    cd DocAligner && \\\n    python setup.py bdist_wheel && \\\n    pip install dist/*.whl && \\\n    cd .. && rm -rf DocAligner\n\n# Set entry point script path\nENV ENTRYPOINT_SCRIPT=/entrypoint.sh\n\n# Install gosu\nRUN apt-get update && apt-get install -y gosu && rm -rf /var/lib/apt/lists/*\n\n# Create entry point script\nRUN printf \'#!/bin/bash\\n\\\n    if [ ! -z "$USER_ID" ] && [ ! -z "$GROUP_ID" ]; then\\n\\\n    groupadd -g "$GROUP_ID" -o usergroup\\n\\\n    useradd --shell /bin/bash -u "$USER_ID" -g "$GROUP_ID" -o -c "" -m user\\n\\\n    export HOME=/home/user\\n\\\n    chown -R "$USER_ID":"$GROUP_ID" /home/user\\n\\\n    chown -R "$USER_ID":"$GROUP_ID" /code\\n\\\n    fi\\n\\\n    \\n\\\n    # Check for parameters\\n\\\n    if [ $# -gt 0 ]; then\\n\\\n    exec gosu ${USER_ID:-0}:${GROUP_ID:-0} python "$@"\\n\\\n    else\\n\\\n    exec gosu ${USER_ID:-0}:${GROUP_ID:-0} bash\\n\\\n    fi\' > "$ENTRYPOINT_SCRIPT"\n\n# Grant permissions\nRUN chmod +x "$ENTRYPOINT_SCRIPT"\n\n# Entry point\nENTRYPOINT ["/bin/bash", "/entrypoint.sh"]\n'})}),"\n",(0,s.jsx)(n.p,{children:"Then build this image:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker build -f your_Dockerfile -t your_image_name .\n"})}),"\n",(0,s.jsx)(n.p,{children:"After that, whenever you use it, wrap the command in Docker:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"#!/bin/bash\ndocker run \\\n    -e USER_ID=$(id -u) \\\n    -e GROUP_ID=$(id -g) \\\n    --gpus all \\\n    -v ${PWD}:/code\n    -it --rm your_image_name your_scripts.py\n"})}),"\n",(0,s.jsx)(n.h3,{id:"installing-internal-packages",children:"Installing Internal Packages"}),"\n",(0,s.jsx)(n.p,{children:"If internal packages need to be installed when building the image, you need to pass in environment variables."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Dockerfile",metastring:'title="your_Dockerfile"',children:'# syntax=docker/dockerfile:experimental\nFROM docsaid_infer_image:latest\n\n# Set the working directory, users can change it as needed\nWORKDIR /code\n\n# Example: Install DocAligner (assuming it\'s an internal package)\n\n# Pass environment variables\nARG PYPI_ACCOUNT\nARG PYPI_PASSWORD\n\n# Change to your internal package source\nENV SERVER_IP=192.168.100.100:28080/simple/\n\n# Install docaligner\n# Remember to change to your package server address\nRUN python -m pip install \\\n    --trusted-host 192.168.100.100 \\\n    --index-url http://${PYPI_ACCOUNT}:${PYPI_PASSWORD}@192.168.100.100:16000/simple docaligner\n\nENTRYPOINT ["python"]\n'})}),"\n",(0,s.jsx)(n.p,{children:"Then build this image:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker build \\\n    -f your_Dockerfile \\\n    --build-arg PYPI_ACCOUNT=your_account \\\n    --build-arg PYPI_PASSWORD=your_password \\\n    -t your_image_name .\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If your account and password are stored elsewhere, like in a ",(0,s.jsx)(n.code,{children:"pip.conf"})," file, you can parse the string to import them, for example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker build \\\n    -f your_Dockerfile \\\n    --build-arg PYPI_PASSWORD=$(awk -F '://|@' '/index-url/{print $2}' your/config/path/pip.conf | cut -d: -f2) \\\n    -t your_image_name .\n"})}),"\n",(0,s.jsx)(n.p,{children:"After that, whenever you use it, wrap the command in Docker as before."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var s=i(96540);const r={},t=s.createContext(r);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);